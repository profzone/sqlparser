// Code generated by goyacc -o ./internal/sql/parser.go ./internal/sql/parser.y. DO NOT EDIT.

//line ./internal/sql/parser.y:2
package sql

import __yyfmt__ "fmt"

//line ./internal/sql/parser.y:2

import (
	"github.com/profzone/sqlparser/internal/sql/ast"
)

//line ./internal/sql/parser.y:9
type yySymType struct {
	yys     int
	string  string
	int64   int64
	float64 float64
	bool    bool

	operator string
	logical  string
	node     ast.Node
	expr     ast.Expr
	stmt     ast.Statement
	ident    *ast.Ident
	selector *ast.SelectorExpr

	fields     ast.FieldsNode
	from       *ast.FromNode
	twoOpExpr  *ast.TwoOpExpr
	conditions ast.TwoOpExprs
	where      *ast.WhereNode
	having     *ast.HavingNode
	orders     *ast.OrderNode
	groups     *ast.GroupNode
	orderList  []ast.Order
	groupList  []ast.Group
}

const LP = 57346
const RP = 57347
const COMMA = 57348
const DOT = 57349
const OPERATOR = 57350
const LOGICAL = 57351
const SELECT = 57352
const STAR = 57353
const AS = 57354
const FROM = 57355
const WHERE = 57356
const GROUP = 57357
const ORDER = 57358
const BY = 57359
const HAVING = 57360
const LIMIT = 57361
const OFFSET = 57362
const DESC = 57363
const ASC = 57364
const IDENT = 57365
const CSTRING = 57366
const CINTEGER = 57367
const CFLOAT = 57368
const CBOOL = 57369

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LP",
	"RP",
	"COMMA",
	"DOT",
	"OPERATOR",
	"LOGICAL",
	"SELECT",
	"STAR",
	"AS",
	"FROM",
	"WHERE",
	"GROUP",
	"ORDER",
	"BY",
	"HAVING",
	"LIMIT",
	"OFFSET",
	"DESC",
	"ASC",
	"IDENT",
	"CSTRING",
	"CINTEGER",
	"CFLOAT",
	"CBOOL",
	"'`'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line ./internal/sql/parser.y:402

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 122

var yyAct = [...]int{
	10, 70, 8, 54, 63, 9, 12, 36, 46, 42,
	45, 13, 75, 76, 27, 2, 11, 29, 61, 12,
	53, 52, 11, 6, 13, 38, 39, 31, 35, 37,
	44, 4, 33, 20, 48, 12, 15, 16, 17, 18,
	13, 12, 15, 16, 17, 18, 13, 35, 47, 50,
	56, 12, 58, 34, 64, 59, 13, 48, 57, 41,
	58, 67, 71, 65, 49, 68, 3, 12, 15, 16,
	17, 18, 13, 64, 73, 71, 78, 77, 12, 15,
	16, 17, 18, 13, 28, 55, 40, 41, 7, 26,
	55, 26, 25, 22, 25, 23, 26, 55, 40, 25,
	26, 26, 74, 25, 25, 32, 7, 66, 1, 72,
	21, 55, 60, 43, 62, 51, 69, 30, 19, 5,
	14, 24,
}

var yyPact = [...]int{
	56, -1000, -1000, 12, 20, 104, -1000, 86, 83, -1000,
	-1000, 18, -1000, -6, -1000, -1000, -1000, -1000, -1000, 13,
	28, 12, -4, -17, 55, 55, -1000, 93, 80, -19,
	15, 44, 52, 56, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -17, -1000, 5, 3, 76, -1000, 44, 88, -17,
	107, -1000, 1, 55, 18, -1000, 81, 102, 18, -1000,
	53, 55, 103, -1000, -1000, -1000, -1000, 92, -17, 96,
	-1000, -9, 55, -1000, 55, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 3, 121, 0, 2, 10, 120, 5, 84, 119,
	1, 4, 8, 31, 118, 117, 116, 115, 114, 113,
	15, 108,
}

var yyR1 = [...]int{
	0, 21, 1, 2, 7, 7, 6, 6, 6, 6,
	8, 8, 9, 9, 9, 9, 13, 13, 14, 14,
	14, 14, 14, 3, 3, 4, 4, 4, 4, 12,
	5, 5, 5, 15, 15, 11, 18, 18, 19, 19,
	10, 10, 10, 16, 16, 17, 17, 20,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 3, 0, 2,
	4, 4, 6, 1, 1, 1, 3, 3, 3, 3,
	1, 3, 3, 0, 2, 1, 1, 3, 0, 3,
	1, 2, 2, 1, 3, 0, 3, 6,
}

var yyChk = [...]int{
	-1000, -21, -20, 10, -13, -9, 11, -8, -4, -7,
	-3, 4, 23, 28, -6, 24, 25, 26, 27, -14,
	13, 6, 7, 12, -2, 11, 8, -4, -8, 23,
	-15, 14, -8, 4, -13, -7, 11, -7, -3, -3,
	5, 7, 28, -19, 15, -5, -12, 4, -4, 12,
	-20, -17, 16, 17, -1, 9, -4, -5, -1, -7,
	5, 17, -18, -11, -3, -12, 5, -4, 12, -16,
	-10, -3, 6, -7, 6, 21, 22, -11, -10,
}

var yyDef = [...]int{
	0, -2, 1, 0, 18, 16, 12, 23, 14, 10,
	25, 0, 4, 0, 24, 6, 7, 8, 9, 33,
	0, 0, 0, 0, 0, 0, 3, 0, 23, 0,
	38, 0, 19, 0, 17, 11, 13, 15, 26, 27,
	28, 0, 5, 45, 0, 34, 30, 0, 0, 0,
	0, 47, 0, 0, 0, 2, 0, 0, 0, 20,
	21, 0, 39, 36, 35, 32, 31, 29, 0, 46,
	43, 40, 0, 22, 0, 41, 42, 37, 44,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 28,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./internal/sql/parser.y:74
		{
			yyVAL.logical = yyDollar[1].logical
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./internal/sql/parser.y:80
		{
			yyVAL.operator = yyDollar[1].operator
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./internal/sql/parser.y:86
		{
			node := &ast.Ident{}
			node.SetVal(yyDollar[1].string)
			yyVAL.ident = node
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./internal/sql/parser.y:92
		{
			node := &ast.Ident{}
			node.SetVal(yyDollar[2].string)
			yyVAL.ident = node
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./internal/sql/parser.y:100
		{
			node := &ast.ConstExpr{
				Val: yyDollar[1].string,
			}
			yyVAL.expr = node
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./internal/sql/parser.y:107
		{
			node := &ast.ConstExpr{
				Val: yyDollar[1].int64,
			}
			yyVAL.expr = node
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./internal/sql/parser.y:114
		{
			node := &ast.ConstExpr{
				Val: yyDollar[1].float64,
			}
			yyVAL.expr = node
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./internal/sql/parser.y:121
		{
			node := &ast.ConstExpr{
				Val: yyDollar[1].bool,
			}
			yyVAL.expr = node
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./internal/sql/parser.y:130
		{
			node := &ast.SelectorExpr{
				X: yyDollar[1].ident,
			}
			yyVAL.selector = node
		}
	case 11:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./internal/sql/parser.y:137
		{
			node := &ast.SelectorExpr{
				Sel: yyDollar[1].selector,
				X:   yyDollar[3].ident,
			}
			yyVAL.selector = node
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./internal/sql/parser.y:147
		{
			node := &ast.Field{
				All: true,
			}
			yyVAL.node = node
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./internal/sql/parser.y:154
		{
			node := &ast.Field{
				Expr: yyDollar[1].selector,
				All:  true,
			}
			yyVAL.node = node
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./internal/sql/parser.y:162
		{
			node := &ast.Field{
				Expr: yyDollar[1].expr,
			}
			yyVAL.node = node
		}
	case 15:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./internal/sql/parser.y:169
		{
			node := &ast.Field{
				Expr:  yyDollar[1].expr,
				Alias: yyDollar[3].ident,
			}
			yyVAL.node = node
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./internal/sql/parser.y:179
		{
			node := ast.FieldsNode{}
			node.Fields = append(node.Fields, *(yyDollar[1].node.(*ast.Field)))
			yyVAL.fields = node
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./internal/sql/parser.y:185
		{
			yyVAL.fields.Fields = append(yyDollar[3].fields.Fields, *(yyDollar[1].node.(*ast.Field)))
		}
	case 18:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ./internal/sql/parser.y:190
		{
			yyVAL.from = nil
		}
	case 19:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ./internal/sql/parser.y:194
		{
			node := &ast.FromNode{
				Expr: yyDollar[2].selector,
			}
			yyVAL.from = node
		}
	case 20:
		yyDollar = yyS[yypt-4 : yypt+1]
//line ./internal/sql/parser.y:201
		{
			node := &ast.FromNode{
				Expr:  yyDollar[2].selector,
				Alias: yyDollar[4].ident,
			}
			yyVAL.from = node
		}
	case 21:
		yyDollar = yyS[yypt-4 : yypt+1]
//line ./internal/sql/parser.y:209
		{
			node := &ast.FromNode{
				Expr: yyDollar[3].stmt,
			}
			yyVAL.from = node
		}
	case 22:
		yyDollar = yyS[yypt-6 : yypt+1]
//line ./internal/sql/parser.y:216
		{
			node := &ast.FromNode{
				Expr:  yyDollar[3].stmt,
				Alias: yyDollar[6].ident,
			}
			yyVAL.from = node
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./internal/sql/parser.y:226
		{
			yyVAL.expr = yyDollar[1].selector
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./internal/sql/parser.y:230
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./internal/sql/parser.y:236
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./internal/sql/parser.y:240
		{
			node := &ast.TwoOpExpr{
				Left:  yyDollar[1].expr,
				Op:    yyDollar[2].operator,
				Right: yyDollar[3].expr,
			}
			yyVAL.expr = node
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./internal/sql/parser.y:249
		{
			node := &ast.TwoOpExpr{
				Left:  yyDollar[1].expr,
				Op:    "*",
				Right: yyDollar[3].expr,
			}
			yyVAL.expr = node
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./internal/sql/parser.y:258
		{
			node := &ast.PrecedenceExpr{
				Val: yyDollar[2].expr,
			}
			yyVAL.expr = node
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./internal/sql/parser.y:267
		{
			node := &ast.TwoOpExpr{
				Left:  yyDollar[1].expr,
				Op:    yyDollar[2].logical,
				Right: yyDollar[3].expr,
			}
			yyVAL.twoOpExpr = node
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./internal/sql/parser.y:278
		{
			yyVAL.expr = yyDollar[1].twoOpExpr
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./internal/sql/parser.y:282
		{
			node := &ast.PrecedenceExpr{
				Val: yyDollar[2].expr,
			}
			yyVAL.expr = node
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./internal/sql/parser.y:289
		{
			node := &ast.TwoOpExpr{
				Left:  yyDollar[1].expr,
				Op:    yyDollar[2].logical,
				Right: yyDollar[3].twoOpExpr,
			}
			yyVAL.expr = node
		}
	case 33:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ./internal/sql/parser.y:299
		{
			yyVAL.where = nil
		}
	case 34:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ./internal/sql/parser.y:303
		{
			node := &ast.WhereNode{
				Conditions: yyDollar[2].expr,
			}
			yyVAL.where = node
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./internal/sql/parser.y:312
		{
			node := &ast.Group{
				Expr: yyDollar[1].expr,
			}
			yyVAL.node = node
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./internal/sql/parser.y:321
		{
			yyVAL.groupList = []ast.Group{*(yyDollar[1].node.(*ast.Group))}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./internal/sql/parser.y:325
		{
			yyVAL.groupList = append(yyDollar[1].groupList, *(yyDollar[3].node.(*ast.Group)))
		}
	case 38:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ./internal/sql/parser.y:330
		{
			yyVAL.groups = nil
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./internal/sql/parser.y:334
		{
			node := &ast.GroupNode{
				Groups: yyDollar[3].groupList,
			}
			yyVAL.groups = node
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./internal/sql/parser.y:343
		{
			node := &ast.Order{
				Expr: yyDollar[1].expr,
			}
			yyVAL.node = node
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ./internal/sql/parser.y:350
		{
			node := &ast.Order{
				Expr:  yyDollar[1].expr,
				Order: 1,
			}
			yyVAL.node = node
		}
	case 42:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ./internal/sql/parser.y:358
		{
			node := &ast.Order{
				Expr: yyDollar[1].expr,
			}
			yyVAL.node = node
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./internal/sql/parser.y:367
		{
			yyVAL.orderList = []ast.Order{*(yyDollar[1].node.(*ast.Order))}
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./internal/sql/parser.y:371
		{
			yyVAL.orderList = append(yyDollar[1].orderList, *(yyDollar[3].node.(*ast.Order)))
		}
	case 45:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ./internal/sql/parser.y:376
		{
			yyVAL.orders = nil
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./internal/sql/parser.y:380
		{
			node := &ast.OrderNode{
				Orders: yyDollar[3].orderList,
			}
			yyVAL.orders = node
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
//line ./internal/sql/parser.y:390
		{
			stmt := &ast.SelectStatement{
				Fields: yyDollar[2].fields,
				From:   yyDollar[3].from,
				Where:  yyDollar[4].where,
				Group:  yyDollar[5].groups,
				Order:  yyDollar[6].orders,
			}
			yyVAL.stmt = stmt
			(yylex.(*Lexer)).Root = yyVAL.stmt
		}
	}
	goto yystack /* stack new state and value */
}
